services:
  backend:
    build:
      context: ./backend-flask/
      dockerfile: Dockerfile.backend
    ports:
      - "4000:4000"
    volumes:
      - backend_db:/app/instance
    networks:
      - app-network
    environment:
      - FLASK_APP=app.main
      - FLASK_ENV=production
      - ADMIN_FIRST_NAME=${ADMIN_FIRST_NAME}
      - ADMIN_LAST_NAME=${ADMIN_LAST_NAME}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend-svelte/
      dockerfile: Dockerfile.frontend
    ports: 
      - "3000:4173"
    volumes:
      - frontend-cache:/app/node_modules/.cache
    command: npm run preview
    networks:
      - app-network
    depends_on:
      - backend
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
      - NODE_ENV=production
    restart: unless-stopped

  tailscale:
    container_name: tailscaled
    image: tailscale/tailscale
    hostname: lessonorganizer2
    network_mode: host
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - /dev/net/tun:/dev/net/tun
      - ./tailscale/varlib:/var/lib
      - ./tailscale/tmp:/tmp
    environment:
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_AUTH_KEY=${TS_AUTH_KEY}
      - TAILSCALE_UP_ARGS=--snat-subnet-routes=false
    restart: unless-stopped

  cron-backup:
    image: alpine:latest
    container_name: cron-backup
    volumes:
      - ./db_backups:/db_backups
      - backend_db:/db_source:ro
    entrypoint: |
      /bin/sh -c '
        echo "0 3 * * 0 cp /db_source/lesson_organizer.db /db_backups/backup-\$(date +\\%F_\\%H-\\%M-\\%S).db && find /db_backups -name \"backup-*.db\" -mtime +90 -delete" > /etc/crontabs/root
        crond -f -d 8
      '
    depends_on:
      - backend
    restart: unless-stopped

  # caddy:
  #   image: caddy:latest
  #   container_name: caddy
  #   networks:
  #     - app-network
  #   ports:
  #     - "80:80"
  #     # - "443:443"
  #   volumes:
  #     - ./caddy/Caddyfile:/etc/caddy/Caddyfile:ro
  #     - caddy_data:/data
  #     - caddy_config:/config
  #   depends_on:
  #     - frontend
  #     - backend

networks:
  app-network:
    driver: bridge

volumes:
  backend_db:
  frontend-cache:
  caddy_data:
  caddy_config: